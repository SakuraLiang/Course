# 位运算
#### 按位与
- 按位与&：将参与运算的两操作数各对应的二进制为进行与操作，只有对应的两个二进位均为1时，结果的对应二进制位才为1，否则为0
- 按位与作用：将某些变量中的某些位清零且同时保持其他位不变(将原变量按位与一个变量，那个变量将要清零的位设为0，其余为为1)。也可以用来获取某变量中的某一位(将原变量按位与一个变量，那个变量将要获取的位置为1，其余为置为0，同时判断结果是否与按位与的变量相同)。
#### 按位或
- 按位或|：将参与运算的两操作数个对应的二进制位进行或操作，只有对应的两个二进制为都为0时，结果对应的二进制为才是0，否则为1.
- 按位或作用：用来将某变量的某些位置1保持其他位不变(原变量按位或一个变量，那个变量将要置1的位设为1，其余位为0)。
#### 按位异或
- 按位异或^：将参与运算的两操作数各对应的二进制位进行异或操作，只有对应的两个二进为不相同时，结果对应的二进制位才是1，否则为0
- 按位异或作用：将某个变量中的某些位取反。保留其他位不变(某一位跟0异或保持不变，跟1异或取反，原变量按位异或一个变量，将那个变量的要取反的位置设为1，其余为为0)。
- 特点1：a^b=c 可以得出 c^b=a以及 c^a=b。
- 特点2：实现不通过临时变量，就交换两个变量的值。
```ruby
int a=5,b=7;
a=a^b;
b=b^a;
a=a^b;
```
已实验，真的行。
#### 按位非
- 按位非~：单目运算符，将操作数中的二进制位0变为1,1变为0。
- 按位非作用：感觉没什么用
#### 左移运算符
- 左移运算符<<：表达式：(a<<b)的值为将a各二进制位全部左移b位后得到的值。左移时，高位丢弃，地位补0.a的值不会改变。
- 左移运算符的作用：左移1位，就相当于乘以2，左移n位，就是乘以2的n次方。左移操作比乘法快。已实验，真的行啊~
#### 右移运算符
- 右移运算符>>:表达式(a>>b)的值是，将a各二进位全部右移b位后得到的值。右移时，移出最右边的位被丢弃。a的值不会因此改变。左边补的数：如果原来的数是有符号数，右移时，符号一起移动，原符号位为1，则补1,原符号位为0，则补0.即符号不变。
- 右移运算符的作用：右移n位，相当于把原来的数除以2的n次方，并将结果往小取整。
# 总述
位运算的计算速度很快，对优化代码有很大的帮助。
